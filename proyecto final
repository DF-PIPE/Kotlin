
const val RESPUESTA_AFIRMATIVA = "✅"
const val RESPUESTA_NEGATIVA = "❌"
const val RESPUESTA_DUDOSA = "❓"


val respuestas = mapOf(
    "Sí" to RESPUESTA_AFIRMATIVA,
    "Es cierto" to RESPUESTA_AFIRMATIVA,
    "Totalmente" to RESPUESTA_AFIRMATIVA,
    "Sin duda" to RESPUESTA_AFIRMATIVA,
    "Pregunta en otro momento" to RESPUESTA_DUDOSA,
    "No puedo decirte en este momento" to RESPUESTA_DUDOSA,
    "Puede que si o puede que no" to RESPUESTA_DUDOSA,
    "No va a suceder" to RESPUESTA_NEGATIVA,
    "No cuentes con ello" to RESPUESTA_NEGATIVA,
    "Definitivamente no" to RESPUESTA_NEGATIVA,
    "No lo creo" to RESPUESTA_NEGATIVA,
)
fun realizarPregunta(){
    println("que quieres preguntar")
    readLine()
    println("Con que esa era tu pregunta... la repsuesta es: ")
    val respustaRamdom = respuestas.keys.random()
    println(respustaRamdom)
}
fun mostrarRespuestas() {
    println("seleccione una opcion")
    println("1. Revizar todo")
    println("2. Revisar todas las respuestas positivas ")
    println("3. Revisar todas las respuestas dudosas")
    println("4. Revisar todas las respuestas neagtivas")
    val opcionIngre = readLine()
    when(opcionIngre){
        "1" -> mostrarRespuestasPorTipo()
        "2" -> mostrarRespuestasPorTipo(tipoDeRespuesta = RESPUESTA_AFIRMATIVA)
        "3" -> mostrarRespuestasPorTipo(tipoDeRespuesta = RESPUESTA_DUDOSA)
        "4" -> mostrarRespuestasPorTipo(tipoDeRespuesta = RESPUESTA_NEGATIVA)
        else -> println("Opcion fuera de rango....Adios :(")
    }

}

fun mostrarRespuestasPorTipo(tipoDeRespuesta:String = "todos") {
    when(tipoDeRespuesta){
        "todos" -> respuestas.keys.forEach { respuesta -> println(respuesta) }
         RESPUESTA_AFIRMATIVA -> respuestas.filterValues { values -> values == RESPUESTA_AFIRMATIVA }
             .also { respuestasPoositivas ->  println(respuestasPoositivas.keys)}
         RESPUESTA_NEGATIVA -> respuestas.filterValues { values -> values == RESPUESTA_NEGATIVA }
            .also { respuestasNegativas ->  println(respuestasNegativas.keys)}
         RESPUESTA_DUDOSA -> respuestas.filterValues { values -> values == RESPUESTA_DUDOSA }
            .also { respuestasDudosa ->  println(respuestasDudosa.keys)}

    }

}
fun salir(){
    println("Adios")
}

fun mostrarError(){
    println("opcion no valida")
}




fun main(args: Array<String>) {
    println("Hola soy tu brujo, cual de las opciones decea realizar")
    println("1. Realizar pregunta")
    println("2. Revisar todas las respuestas")
    println("3. Terminar")

    val opcion = readLine()
    when(opcion){
        "1" -> realizarPregunta()
        "2" -> mostrarRespuestas()
        "3" -> salir()
        else -> mostrarError()
    }
}

